package DigitRecogniser;

import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * A program to predict the value of drawn and uploaded images
 * @author codingmroberts
 */
public class Main extends javax.swing.JFrame {
    
    final DrawArea paint = new DrawArea();
    
    String TEST_LABEL_FILE = "C:/Users/User/Documents/MNIST/t10k-labels.idx1-ubyte";
    String TEST_IMAGE_FILE = "C:/Users/User/Documents/MNIST/t10k-images.idx3-ubyte";
    String TRAIN_LABEL_FILE = "C:/Users/User/Documents/MNIST/train-labels.idx1-ubyte";
    String TRAIN_IMAGE_FILE = "C:/Users/User/Documents/MNIST/train-images.idx3-ubyte";
    
    /**
     * Initialise a dataset object
     */
    public Dataset primary;
    
    /**
     * Initialise designer components
     * Initialise components
     */
    public Main() {
        initComponents();
        
        myInit();
    }

    private void myInit(){
        paintHolder.setLayout(new FlowLayout(FlowLayout.CENTER));
        paintHolder.add(paint);
    }
         static int mostFrequent(int arr[], int n) 
    { 
          
        // Sort the array 
        Arrays.sort(arr); 
          
        // find the max frequency using linear 
        // traversal 
        int max_count = 1, res = arr[0]; 
        int curr_count = 1; 
          
        for (int i = 1; i < n; i++) 
        { 
            if (arr[i] == arr[i - 1]) 
                curr_count++; 
            else 
            { 
                if (curr_count > max_count) 
                { 
                    max_count = curr_count; 
                    res = arr[i - 1]; 
                } 
                curr_count = 1; 
            } 
        } 
      
        // If last element is most frequent 
        if (curr_count > max_count) 
        { 
            max_count = curr_count; 
            res = arr[n - 1]; 
        } 
      
        return res;
    }
        
    // An optimized version of Bubble Sort 
    static void bubbleSort(double arr[], int idx[], int n) 
    { 
        int i, j, tempB; 
        double temp;
        
        boolean swapped; 
        for (i = 0; i < n - 1; i++)  
        { 
            swapped = false; 
            for (j = 0; j < n - i - 1; j++)  
            { 
                if (arr[j] > arr[j + 1])  
                { 
                    temp = arr[j]; 
                    arr[j] = arr[j + 1]; 
                    arr[j + 1] = temp;
                    
                    tempB = idx[j]; 
                    idx[j] = idx[j + 1]; 
                    idx[j + 1] = tempB;
                    
                    swapped = true; 
                } 
            } 
  
            // IF no two elements were  
            // swapped by inner loop, then break 
            if (swapped == false) 
                break; 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMenu = new javax.swing.JTabbedPane();
        modelPanel = new javax.swing.JPanel();
        trainModel = new javax.swing.JButton();
        trainLoadingBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();
        accuracyLabel = new javax.swing.JLabel();
        accuracyValueModel = new javax.swing.JLabel();
        testModel = new javax.swing.JButton();
        statusLabel1 = new javax.swing.JLabel();
        trainLoadingBar1 = new javax.swing.JProgressBar();
        drawDigitPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        previewPanel = new javax.swing.JPanel();
        predictionValueDraw = new javax.swing.JLabel();
        predictPaint = new javax.swing.JButton();
        clearPaint = new javax.swing.JButton();
        paintHolder = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        accuracyValueDraw = new javax.swing.JLabel();
        uploadDigitPanel = new javax.swing.JPanel();
        predictionArea = new javax.swing.JPanel();
        previewPanel1 = new javax.swing.JPanel();
        predictionValueUpload = new javax.swing.JLabel();
        predictUpload = new javax.swing.JButton();
        chooseFile = new javax.swing.JButton();
        fileLocationTextbox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        accuracyValueUpload = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabMenu.setName("tabMenu"); // NOI18N

        trainModel.setText("Train Model");
        trainModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainModelActionPerformed(evt);
            }
        });

        statusLabel.setText("Ready");

        accuracyLabel.setText("Accuracy: ");

        accuracyValueModel.setText("0");

        testModel.setText("Test Model");
        testModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testModelActionPerformed(evt);
            }
        });

        statusLabel1.setText("Ready");

        javax.swing.GroupLayout modelPanelLayout = new javax.swing.GroupLayout(modelPanel);
        modelPanel.setLayout(modelPanelLayout);
        modelPanelLayout.setHorizontalGroup(
            modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainModel)
                    .addGroup(modelPanelLayout.createSequentialGroup()
                        .addComponent(accuracyLabel)
                        .addGap(18, 18, 18)
                        .addComponent(accuracyValueModel))
                    .addComponent(testModel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modelPanelLayout.createSequentialGroup()
                        .addComponent(statusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trainLoadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modelPanelLayout.createSequentialGroup()
                        .addComponent(statusLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trainLoadingBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        modelPanelLayout.setVerticalGroup(
            modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accuracyLabel)
                    .addComponent(accuracyValueModel))
                .addGap(236, 236, 236)
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusLabel1)
                    .addComponent(trainLoadingBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(modelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(trainModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusLabel))
                    .addComponent(trainLoadingBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        trainModel.getAccessibleContext().setAccessibleName("");

        tabMenu.addTab("Model", modelPanel);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        previewPanel.setBackground(new java.awt.Color(204, 204, 204));

        predictionValueDraw.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        predictionValueDraw.setText("0");

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(predictionValueDraw)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(predictionValueDraw)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        jPanel1.add(previewPanel);

        predictPaint.setText("Predict");
        predictPaint.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        predictPaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictPaintActionPerformed(evt);
            }
        });
        jPanel1.add(predictPaint);

        clearPaint.setText("Clear");
        clearPaint.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clearPaint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearPaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPaintActionPerformed(evt);
            }
        });
        jPanel1.add(clearPaint);

        javax.swing.GroupLayout paintHolderLayout = new javax.swing.GroupLayout(paintHolder);
        paintHolder.setLayout(paintHolderLayout);
        paintHolderLayout.setHorizontalGroup(
            paintHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        paintHolderLayout.setVerticalGroup(
            paintHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 285, Short.MAX_VALUE)
        );

        jLabel1.setText("Accuracy: ");

        accuracyValueDraw.setText("0");

        javax.swing.GroupLayout drawDigitPanelLayout = new javax.swing.GroupLayout(drawDigitPanel);
        drawDigitPanel.setLayout(drawDigitPanelLayout);
        drawDigitPanelLayout.setHorizontalGroup(
            drawDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawDigitPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drawDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paintHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(drawDigitPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accuracyValueDraw)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        drawDigitPanelLayout.setVerticalGroup(
            drawDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
            .addGroup(drawDigitPanelLayout.createSequentialGroup()
                .addComponent(paintHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(drawDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(accuracyValueDraw))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabMenu.addTab("Draw Digit", drawDigitPanel);

        predictionArea.setBackground(new java.awt.Color(204, 204, 204));

        previewPanel1.setBackground(new java.awt.Color(204, 204, 204));

        predictionValueUpload.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        predictionValueUpload.setText("0");

        javax.swing.GroupLayout previewPanel1Layout = new javax.swing.GroupLayout(previewPanel1);
        previewPanel1.setLayout(previewPanel1Layout);
        previewPanel1Layout.setHorizontalGroup(
            previewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanel1Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(predictionValueUpload)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        previewPanel1Layout.setVerticalGroup(
            previewPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(predictionValueUpload)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        predictUpload.setText("Predict");
        predictUpload.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        predictUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictUploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout predictionAreaLayout = new javax.swing.GroupLayout(predictionArea);
        predictionArea.setLayout(predictionAreaLayout);
        predictionAreaLayout.setHorizontalGroup(
            predictionAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictionAreaLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(previewPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(predictionAreaLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(predictUpload))
        );
        predictionAreaLayout.setVerticalGroup(
            predictionAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictionAreaLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(previewPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(predictUpload))
        );

        chooseFile.setText("Choose File");
        chooseFile.setActionCommand("chooseFile");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        fileLocationTextbox.setText("C:\\");

            jLabel2.setText("Accuracy: ");

            accuracyValueUpload.setText("0");

            javax.swing.GroupLayout uploadDigitPanelLayout = new javax.swing.GroupLayout(uploadDigitPanel);
            uploadDigitPanel.setLayout(uploadDigitPanelLayout);
            uploadDigitPanelLayout.setHorizontalGroup(
                uploadDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(uploadDigitPanelLayout.createSequentialGroup()
                    .addComponent(predictionArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(uploadDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(uploadDigitPanelLayout.createSequentialGroup()
                            .addComponent(fileLocationTextbox)
                            .addContainerGap())
                        .addGroup(uploadDigitPanelLayout.createSequentialGroup()
                            .addGroup(uploadDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(chooseFile)
                                .addGroup(uploadDigitPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(accuracyValueUpload)))
                            .addGap(0, 215, Short.MAX_VALUE))))
            );
            uploadDigitPanelLayout.setVerticalGroup(
                uploadDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(predictionArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(uploadDigitPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileLocationTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(chooseFile)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(uploadDigitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(accuracyValueUpload))
                    .addContainerGap())
            );

            tabMenu.addTab("Upload Digit", uploadDigitPanel);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Train model button
     * initialises the training dataset and performs training to create classification
     * Sets the accuracy label in GUI
     */
    private void trainModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainModelActionPerformed

        // initialize dataset
        int[] labels = readerMNIST.getLabels(TRAIN_LABEL_FILE);
        List<int[]> images2 = readerMNIST.getImages2(TRAIN_IMAGE_FILE);
           
        primary = new Dataset(images2, labels);
        
        primary.trainModel();
        
        trainLoadingBar.setValue(100);

        accuracyValueModel.setText(Double.toString(primary.getAccuracy()));
        
        
    }//GEN-LAST:event_trainModelActionPerformed

    private void clearPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPaintActionPerformed

        paint.clear();
    }//GEN-LAST:event_clearPaintActionPerformed

     /**
     * Predict paint button
     * using the training classification it attempts to predict the drawn digit
     * using the image from DrawArea
     */
    private void predictPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictPaintActionPerformed
        saveImg();
        primary.predict(convertImgToArray(saveImg()));
        predictionValueDraw.setText(Integer.toString(primary.getPredictionValue()));
        accuracyValueDraw.setText(Double.toString(primary.getAccuracy()));
    }//GEN-LAST:event_predictPaintActionPerformed
    /**
     * Predict upload button
     * using the training classification it attempts to predict the drawn digit
     * using the uploaded image
     */
    private void predictUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictUploadActionPerformed
        try
        { 
            BufferedImage image = ImageIO.read(new File(fileLocationTextbox.getText()));

            // grayscale image and resize to 28x28
            image = grayscaleImg(resizeImg(image));
            
            // predict image digit
            primary.predict(convertImgToArray(image));
            predictionValueUpload.setText(Integer.toString(primary.getPredictionValue()));
            accuracyValueUpload.setText(Double.toString(primary.getAccuracy()));
        } 
        catch(IOException e) 
        { 
            System.out.println("Error: "+e); 
        } 
    }//GEN-LAST:event_predictUploadActionPerformed

     /**
     * Creates a new file chooser for the user to find and upload an image
     * saves the file location to a textbox
     */
    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        // Set current directory
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        // Show up dialog
        int result = fileChooser.showOpenDialog(fileChooser);
        if (result == JFileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            fileLocationTextbox.setText(file.toString());
            
        }

    }//GEN-LAST:event_chooseFileActionPerformed

    /**
     * Test training model button
     * This button performs a test on a dataset of 10000 images
     * Using the classification from the training model
     */
    private void testModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testModelActionPerformed
        primary.addImagesListTest(readerMNIST.getImages2(TEST_IMAGE_FILE));
        primary.addLabelsListTest(readerMNIST.getLabels(TEST_LABEL_FILE));
        
        primary.testModel();
    }//GEN-LAST:event_testModelActionPerformed

    /**
     * Resizes a given image to a size of 28x28
     * @param image
     * @return outputImage
     */
    public BufferedImage resizeImg(BufferedImage image){
                // creates output image
	BufferedImage outputImage = new BufferedImage(28, 
                28, image.TYPE_INT_ARGB);
        
        // scales the input image to the output image
	Graphics2D g2d = outputImage.createGraphics();
	g2d.drawImage(image, 0, 0, 28, 28, null);
	g2d.dispose();
        
        return outputImage;
    }
    
    /**
     * Turns a given image into a grayscale version of itself
     * @param image
     * @return outputImage
     */
    public BufferedImage grayscaleImg(BufferedImage image){
        
        BufferedImage outputImage = image;
        // convert image to grayscale
        for (int x = 0; x < outputImage.getWidth(); ++x){
            for (int y = 0; y < outputImage.getHeight(); ++y)
            {
                int rgb = outputImage.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int green = (rgb >> 8) & 0xFF;
                int b = (rgb & 0xFF);

                int grayscale = (int) ((0.3*r) + (0.59*green) + (0.11 * b));
                int newPixel = 0xFF000000 | (grayscale << 16 ) | 
                        (grayscale << 8 ) |
                        (grayscale);
                outputImage.setRGB(x, y, newPixel);
            }
        }
        return outputImage;
    }
    
    /**
     * Converts a given image to a 2 dimensional array of integers
     * @param image
     * @return imgArr
     */
    public int[][] convertImgToArray(BufferedImage image){
        BufferedImage img = image;
        int width = img.getWidth();
        int height = img.getHeight();
        int[][] imgArr = new int[width][height];
            
        Raster raster = img.getData();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                imgArr[i][j] = raster.getSample(i, j, 0);
            }
        }
        return imgArr;
    }
    
    /**
     * Grabs the image from the DrawArea and performs processing on the image
     * converts image to grayscale and resizes to 28x28
     * @return outputImage
     */
    public BufferedImage saveImg(){       
        // grab image from DrawArea
        BufferedImage image = new BufferedImage(paint.getWidth(), paint.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = image.getGraphics();
        paint.paint(g);
        g.dispose();
        
        // resize and grayscale the image
        BufferedImage outputImage = (grayscaleImg(resizeImg(image)));
        
        return outputImage;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accuracyLabel;
    private javax.swing.JLabel accuracyValueDraw;
    private javax.swing.JLabel accuracyValueModel;
    private javax.swing.JLabel accuracyValueUpload;
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton clearPaint;
    private javax.swing.JPanel drawDigitPanel;
    private javax.swing.JTextField fileLocationTextbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel modelPanel;
    private javax.swing.JPanel paintHolder;
    private javax.swing.JButton predictPaint;
    private javax.swing.JButton predictUpload;
    private javax.swing.JPanel predictionArea;
    private javax.swing.JLabel predictionValueDraw;
    private javax.swing.JLabel predictionValueUpload;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JPanel previewPanel1;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusLabel1;
    private javax.swing.JTabbedPane tabMenu;
    private javax.swing.JButton testModel;
    private javax.swing.JProgressBar trainLoadingBar;
    private javax.swing.JProgressBar trainLoadingBar1;
    private javax.swing.JButton trainModel;
    private javax.swing.JPanel uploadDigitPanel;
    // End of variables declaration//GEN-END:variables
}
